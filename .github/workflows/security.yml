name: Security Audit

on:
  # Run daily at 2 AM UTC
  schedule:
    - cron: '0 2 * * *'
  # Run on security-related PRs
  pull_request:
    paths:
      - 'Cargo.toml'
      - 'Cargo.lock'
  # Allow manual triggers
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-bin

    - name: Install cargo-audit
      run: |
        if ! command -v cargo-audit &> /dev/null; then
          cargo install cargo-audit --features=fix
        fi

    - name: Run cargo audit
      run: cargo audit --deny warnings

  dependency_review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5
    
    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail on high/critical vulnerabilities
        fail-on-severity: moderate
        # Allow GPL licenses for this protocol library
        allow-licenses: GPL-2.0, GPL-3.0, LGPL-2.1, LGPL-3.0, MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause

  supply_chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo-deny
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-deny
        key: cargo-deny-bin

    - name: Install cargo-deny
      run: |
        if ! command -v cargo-deny &> /dev/null; then
          cargo install cargo-deny
        fi

    - name: Create cargo-deny config
      run: |
        cat > deny.toml << EOF
        [graph]
        targets = []

        [advisories]
        db-path = "~/.cargo/advisory-db"
        db-urls = ["https://github.com/rustsec/advisory-db"]
        vulnerability = "deny"
        unmaintained = "workspace"
        yanked = "deny"
        notice = "warn"
        ignore = []

        [licenses]
        unlicensed = "deny"
        allow = [
            "Apache-2.0",
            "Apache-2.0 WITH LLVM-exception",
            "MIT",
            "BSD-2-Clause", 
            "BSD-3-Clause",
            "ISC",
            "Unicode-DFS-2016",
        ]
        deny = []
        copyleft = "warn"
        confidence-threshold = 0.8

        [bans]
        multiple-versions = "warn"
        wildcards = "allow"
        highlight = "all"
        workspace-default-features = "allow"
        external-default-features = "allow"

        [sources]
        unknown-registry = "warn"
        unknown-git = "warn"
        allow-registry = ["https://github.com/rust-lang/crates.io-index"]
        allow-git = []
        EOF

    - name: Run cargo deny
      run: cargo deny check

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.actor != 'nektos/act'
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Display Trivy scan results (local execution)
      if: always() && github.actor == 'nektos/act'
      run: |
        echo "=== Trivy Security Scan Results ==="
        if [ -f trivy-results.sarif ]; then
          echo "SARIF file generated successfully: trivy-results.sarif"
          echo "File size: $(wc -c < trivy-results.sarif) bytes"
          echo "Number of results: $(jq '.runs[0].results | length' trivy-results.sarif 2>/dev/null || echo 'N/A')"
        else
          echo "No SARIF file generated"
        fi