name: Continuous Integration

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable, beta]
        include:
          # Test MSRV on Ubuntu only to speed up CI
          - os: ubuntu-latest
            rust: 1.90.0
    
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run cargo check
      run: cargo check --all-targets --all-features

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Run integration tests
      run: cargo test --test messages --verbose

    - name: Build examples
      run: |
        cargo build --example heartbeat-client
        cargo build --example heartbeat-server
        cargo build --example session-client
        cargo build --example session-server
        cargo build --example pcap-reader

    - name: Test examples compilation
      run: |
        cargo check --example heartbeat-client
        cargo check --example heartbeat-server
        cargo check --example session-client
        cargo check --example session-server
        cargo check --example pcap-reader

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-clippy-

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-docs-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-docs-

    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features
      env:
        RUSTDOCFLAGS: -D warnings

  protocol-compliance:
    name: PFCP Protocol Compliance
    runs-on: ubuntu-latest
    steps:
    - name: Checkout sources
      uses: actions/checkout@v5

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-protocol-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-protocol-

    - name: Run protocol compliance tests
      run: |
        # Run all IE tests to ensure 3GPP TS 29.244 compliance
        cargo test ie:: --verbose
        
        # Run message marshal/unmarshal roundtrip tests
        cargo test marshal_unmarshal --verbose
        
        # Test binary protocol encoding/decoding
        cargo test test_.*_round_trip --verbose

    - name: Test session report demo
      run: |
        # Test the session report demo script can execute
        cd examples
        chmod +x test_session_report.sh
        timeout 30s ./test_session_report.sh lo || true

  # network-tests:
  #   name: Network Interface Tests
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout sources
  #     uses: actions/checkout@v5

  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@stable

  #   - name: Cache Cargo
  #     uses: actions/cache@v4
  #     with:
  #       path: |
  #         ~/.cargo/registry
  #         ~/.cargo/git
  #         target
  #       key: ubuntu-network-${{ hashFiles('**/Cargo.lock') }}
  #       restore-keys: |
  #         ubuntu-network-

  #   - name: Test network interface detection
  #     run: |
  #       # Test that examples can detect network interfaces
  #       cargo run --example heartbeat-server -- --help || true
  #       cargo run --example session-server -- --help || true
  #       
  #       # Test loopback interface detection
  #       ip link show lo
  #       
  #   - name: Test PFCP packet analysis
  #     run: |
  #       # Create a dummy pcap file and test pcap-reader
  #       echo "Test pcap analysis functionality"
  #       cargo run --example pcap-reader -- --help || true
